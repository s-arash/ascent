name: Rust

on:
  push:
    branches: [ master, ci, lattices, wasm-support, macro-in-macro, rel-index-trait, par ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - run: cargo --version
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
          override: true
          toolchain: 1.66
    
    - run: cargo --version

    - name: Run ascent_tests tests
      working-directory: ./ascent_tests
      run: cargo test
    
    - name: Run ascent_tests tests with `--features par`
      working-directory: ./ascent_tests
      run: cargo test --features par

    - name: Run ./ascent tests
      working-directory: ./ascent
      run: cargo test
    
    - name: Run ascent_base tests
      working-directory: ./ascent_base
      run: cargo test
    
    - name: Run Benchmarks
      working-directory: ./ascent_tests
      run: cargo bench bench_tc -- --nocapture
    
    - name: Run ascent_tests/src/bin benchmarks
      working-directory: ./ascent_tests
      run: cargo run --release --bin tc && cargo run --release --features par --bin tc
    
    - uses: jetli/wasm-pack-action@v0.3.0
      with:
        # Optional version of wasm-pack to install(eg. 'v0.9.1', 'latest')
        version: 'latest'

    - name: Run wasm tests
      working-directory: ./wasm-tests
      run: |
        cargo tree
        wasm-pack test  --headless --firefox

      # macro tests should be last, because they produce scratchpad.rs, which my not compile
    - name: Run macro tests
      working-directory: ./ascent_macro
      run: cargo test test  
  
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - run: cargo --version
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
            override: true
            toolchain: nightly

      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions

      - name: cargo minimal-versions
        run: cargo +stable minimal-versions check --workspace --all-features --ignore-private -v
  